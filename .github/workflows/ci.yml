name: CI

on:
  push:
    branches: [ ci-format-test2 ]
  pull_request:
    branches: [ ci-format-test2 ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      # Only this branch is allowed to receive CI auto-format pushes (test mode)
      ALLOWED_PUSH_BRANCHES: "ci-format-test2"
    permissions:
      contents: write  # needed to push auto-format commits
    strategy:
      matrix:
        python-version: [ "3.12", "3.13" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit black ruff
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      # Run pre-commit across the repo but do not fail the job if it reformats.
      # This ensures CI can continue to the Black auto-format step below.
      - name: Run pre-commit (allow fixes)
        run: |
          pre-commit run --all-files || true

      # Replace black --check with an auto-format pass.
      # We scope to src/ and tests/ to match the project layout you described.
      - name: Black auto-format
        run: |
          black src tests || true

      # Optional: Ruff lint (non-blocking). Make it blocking if you prefer.
      - name: Ruff (non-blocking)
        run: |
          ruff check . || true

      # Commit any changes produced by pre-commit/Black.
      - name: Commit formatting changes (only if needed)
        if: ${{ matrix.python-version == '3.12' && github.event_name == 'push' && contains(env.ALLOWED_PUSH_BRANCHES, github.ref_name) }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "style(ci): auto-format with Black"
          fi

      # Push only on Python 3.12 runs and only on push events.
      # This avoids multiple parallel pushes from the matrix and avoids pushing from PRs/forks.
      - name: Push changes
        if: ${{ matrix.python-version == '3.12' && github.event_name == 'push' && contains(env.ALLOWED_PUSH_BRANCHES, github.ref_name) }}
        run: |
          if [ -n "$(git log --oneline origin/${GITHUB_REF_NAME}..HEAD)" ]; then
            git push
          fi

      # Your test step(s) go here. Keep them after formatting so tests run on the final tree state.
      - name: Run tests
        run: |
          if [ -f pyproject.toml ] || [ -f pytest.ini ] || [ -f tox.ini ]; then
            python -m pip install -U pytest
            pytest -q
          else
            echo "No tests configured. Skipping."
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Show Python info
        run: |
          python -V
          which python
          pip -V

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            echo "No requirements.txt found; continuing."
          fi
          if [ -f requirements-dev.txt ]; then
            python -m pip install -r requirements-dev.txt
          else
            echo "No requirements-dev.txt found; continuing."
          fi
          python -m pip install pre-commit

      - name: Run pre-commit (allow fixes; do not fail build)
        run: |
          if [ -f .pre-commit-config.yaml ]; then
            # Let pre-commit auto-fix; do not fail the job on changes.
            pre-commit run --all-files || true
          else
            echo "No .pre-commit-config.yaml found; skipping pre-commit."
          fi

      - name: Lint (ruff)
        run: |
          if [ -d src ] || [ -d tests ]; then
            ruff check src tests
          else
            echo "No src/ or tests/ directory; skipping ruff."
          fi

      - name: Auto-format (black) and commit changes
        if: ${{ matrix.python-version == '3.12' }}
        run: |
          set -e
          if [ -d src ] || [ -d tests ]; then
            black src tests
            if ! git diff --quiet; then
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git add -A
              git commit -m "style(ci): auto-format with Black"
            else
              echo "No formatting changes to commit."
            fi
          else
            echo "No src/ or tests/ directory; skipping black."
          fi

      - name: Push formatting commit (if any)
        if: ${{ matrix.python-version == '3.12' && success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Only push if there is a newly created commit
          if git log -1 --pretty=%B | grep -q "style(ci): auto-format with Black"; then
            git push
          else
            echo "Nothing to push."
          fi

      - name: Run tests
        run: |
          if compgen -G "tests/*.py" > /dev/null; then
            pytest -q --maxfail=1 --disable-warnings --cov=src --cov-report=term-missing
          else
            echo "No tests found; skipping pytest."
          fi

      - name: Upload coverage artifact
        if: ${{ hashFiles('.coverage') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: ./.coverage