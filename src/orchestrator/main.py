from __future__ import annotations

import argparse
import json
import logging
from datetime import datetime, timezone
from pathlib import Path
from typing import Any, Dict

import yaml
from jsonschema import validate
from jsonschema.exceptions import ValidationError
from rich.console import Console
from rich.table import Table
from dotenv import load_dotenv

from .schemas import CONFIG_SCHEMA
from .github_helper import ensure_branch_and_push, open_pr

console = Console()
log = logging.getLogger("orchestrator")


def load_config(path: Path) -> Dict[str, Any]:
    with path.open("r", encoding="utf-8") as f:
        data = yaml.safe_load(f)
    return data


def validate_config(cfg: Dict[str, Any]) -> None:
    try:
        validate(instance=cfg, schema=CONFIG_SCHEMA)
    except ValidationError as e:
        raise SystemExit(
            f"Config validation error: {e.message} at {list(e.absolute_path)}"
        )


def summarize(cfg: Dict[str, Any]) -> None:
    table = Table(title="Orchestrator Plan (dry-run)", show_lines=True)
    table.add_column("Section")
    table.add_column("Details")
    table.add_row(
        "Target Repo", f"{cfg.get('target_repo')} @ {cfg.get('commit','HEAD')}"
    )
    table.add_row("Include", ", ".join(cfg["paths"]["include"]))
    table.add_row("Exclude", ", ".join(cfg["paths"]["exclude"]))
    job = cfg["job"]
    table.add_row("Job", f"{job['id']} — {job['goal']}")
    scope = job.get("scope", {})
    table.add_row("Scope.allow", ", ".join(scope.get("allow", [])))
    table.add_row("Scope.deny", ", ".join(scope.get("deny", [])))
    table.add_row(
        "Agents",
        f"reader={cfg['agents']['reader']}, planner={cfg['agents']['planner']}, coder={cfg['agents']['coder']}",
    )
    table.add_row("Mode", job["mode"])
    console.print(table)


def write_artifacts(cfg: Dict[str, Any], artifacts_dir: Path) -> None:
    artifacts_dir.mkdir(parents=True, exist_ok=True)
    (artifacts_dir / "orchestrator.config.json").write_text(
        json.dumps(cfg, indent=2), encoding="utf-8"
    )
    (artifacts_dir / "README.txt").write_text(
        "Artifacts placeholder. This is where RepoSnapshot.json, ChangePlan.json, and PatchSet diffs will be saved.\n",
        encoding="utf-8",
    )


def run(cfg_path: Path, dry_run: bool) -> None:
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s"
    )
    # load local env (for GITHUB_TOKEN, etc.)
    load_dotenv()
    cfg = load_config(cfg_path)
    validate_config(cfg)
    summarize(cfg)

    # timezone-aware UTC timestamp (avoids deprecation warning)
    ts = datetime.now(timezone.utc).strftime("%Y%m%d-%H%M%S")
    art = Path("artifacts") / ts
    write_artifacts(cfg, art)
    log.info("Artifacts directory: %s", art)

    if dry_run or cfg["job"]["mode"] == "analyze_only":
        console.print(
            "[bold green]Dry-run complete.[/bold green] You can now edit orchestrator.yml and rerun."
        )
        return

    # --- Reader → Planner → Coder stubs (replace with your real calls) ---
    console.print("[yellow]Reader[/yellow]: would produce RepoSnapshot.json")
    console.print("[yellow]Planner[/yellow]: would produce ChangePlan.json")
    console.print("[yellow]Coder[/yellow]: would produce PatchSet diffs")

    # Create/push a work branch and open a PR (demonstration without diffs)
    job = cfg["job"]
    work_branch = job.get("branching", {}).get("prefix", f"orchestrator/{job['id']}")
    console.print(f"[cyan]Creating/pushing branch[/cyan]: {work_branch}")
    owner, repo_name, base_branch = ensure_branch_and_push(
        Path(cfg["target_repo"]), work_branch
    )

    pr_title = job["goal"]
    reviewers = ", ".join(job.get("branching", {}).get("reviewers", []))
    pr_body = (
        f"Automated change generated by AI Orchestrator.\n\n"
        f"Job ID: {job['id']}\n"
        f"Goal: {job['goal']}\n"
        f"Reviewers: {reviewers}\n"
        f"Artifacts: {art}\n"
    )
    console.print("[cyan]Opening PR[/cyan] …")
    pr_url = open_pr(owner, repo_name, work_branch, base_branch, pr_title, pr_body)
    console.print(f"[bold green]PR CREATED[/bold green]: {pr_url}")


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="AI Orchestrator driver")
    p.add_argument(
        "--config",
        default="orchestrator.yml",
        help="Path to single-file orchestrator config",
    )
    p.add_argument(
        "--dry-run",
        action="store_true",
        help="Validate and summarize without calling agents",
    )
    return p.parse_args()


if __name__ == "__main__":
    args = parse_args()
    run(Path(args.config), dry_run=args.dry_run)
